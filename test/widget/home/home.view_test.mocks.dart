// Mocks generated by Mockito 5.4.2 from annotations
// in appserap/test/widget/home/home.view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:appserap/services/api.dart' as _i4;
import 'package:appserap/stores/principal.store.dart' as _i5;
import 'package:appserap/stores/usuario.store.dart' as _i2;
import 'package:mobx/mobx.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUsuarioStore_0 extends _i1.SmartFake implements _i2.UsuarioStore {
  _FakeUsuarioStore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i3.ReactiveContext {
  _FakeReactiveContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i4.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [PrincipalStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrincipalStore extends _i1.Mock implements _i5.PrincipalStore {
  MockPrincipalStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UsuarioStore get usuario => (super.noSuchMethod(
        Invocation.getter(#usuario),
        returnValue: _FakeUsuarioStore_0(
          this,
          Invocation.getter(#usuario),
        ),
      ) as _i2.UsuarioStore);
  @override
  String get dispositivoId => (super.noSuchMethod(
        Invocation.getter(#dispositivoId),
        returnValue: '',
      ) as String);
  @override
  set dispositivoId(String? value) => super.noSuchMethod(
        Invocation.setter(
          #dispositivoId,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get idDispositivo => (super.noSuchMethod(
        Invocation.getter(#idDispositivo),
        returnValue: '',
      ) as String);
  @override
  set idDispositivo(String? value) => super.noSuchMethod(
        Invocation.setter(
          #idDispositivo,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get versaoApp => (super.noSuchMethod(
        Invocation.getter(#versaoApp),
        returnValue: '',
      ) as String);
  @override
  set versaoApp(String? value) => super.noSuchMethod(
        Invocation.setter(
          #versaoApp,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get temConexao => (super.noSuchMethod(
        Invocation.getter(#temConexao),
        returnValue: false,
      ) as bool);
  @override
  set temConexao(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #temConexao,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get versao => (super.noSuchMethod(
        Invocation.getter(#versao),
        returnValue: '',
      ) as String);
  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);
  @override
  void Function(
    Object?, [
    Object?,
    StackTrace?,
  ]) get shout => (super.noSuchMethod(
        Invocation.getter(#shout),
        returnValue: (
          Object? __p0, [
          Object? __p1,
          StackTrace? __p2,
        ]) {},
      ) as void Function(
        Object?, [
        Object?,
        StackTrace?,
      ]));
  @override
  void Function(
    Object?, [
    Object?,
    StackTrace?,
  ]) get severe => (super.noSuchMethod(
        Invocation.getter(#severe),
        returnValue: (
          Object? __p0, [
          Object? __p1,
          StackTrace? __p2,
        ]) {},
      ) as void Function(
        Object?, [
        Object?,
        StackTrace?,
      ]));
  @override
  void Function(
    Object?, [
    Object?,
    StackTrace?,
  ]) get warning => (super.noSuchMethod(
        Invocation.getter(#warning),
        returnValue: (
          Object? __p0, [
          Object? __p1,
          StackTrace? __p2,
        ]) {},
      ) as void Function(
        Object?, [
        Object?,
        StackTrace?,
      ]));
  @override
  void Function(
    Object?, [
    Object?,
    StackTrace?,
  ]) get info => (super.noSuchMethod(
        Invocation.getter(#info),
        returnValue: (
          Object? __p0, [
          Object? __p1,
          StackTrace? __p2,
        ]) {},
      ) as void Function(
        Object?, [
        Object?,
        StackTrace?,
      ]));
  @override
  void Function(
    Object?, [
    Object?,
    StackTrace?,
  ]) get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: (
          Object? __p0, [
          Object? __p1,
          StackTrace? __p2,
        ]) {},
      ) as void Function(
        Object?, [
        Object?,
        StackTrace?,
      ]));
  @override
  void Function(
    Object?, [
    Object?,
    StackTrace?,
  ]) get fine => (super.noSuchMethod(
        Invocation.getter(#fine),
        returnValue: (
          Object? __p0, [
          Object? __p1,
          StackTrace? __p2,
        ]) {},
      ) as void Function(
        Object?, [
        Object?,
        StackTrace?,
      ]));
  @override
  void Function(
    Object?, [
    Object?,
    StackTrace?,
  ]) get finer => (super.noSuchMethod(
        Invocation.getter(#finer),
        returnValue: (
          Object? __p0, [
          Object? __p1,
          StackTrace? __p2,
        ]) {},
      ) as void Function(
        Object?, [
        Object?,
        StackTrace?,
      ]));
  @override
  void Function(
    Object?, [
    Object?,
    StackTrace?,
  ]) get finest => (super.noSuchMethod(
        Invocation.getter(#finest),
        returnValue: (
          Object? __p0, [
          Object? __p1,
          StackTrace? __p2,
        ]) {},
      ) as void Function(
        Object?, [
        Object?,
        StackTrace?,
      ]));
  @override
  _i6.Future<void> setup() => (super.noSuchMethod(
        Invocation.method(
          #setup,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<String?> obetIdDispositivo() => (super.noSuchMethod(
        Invocation.method(
          #obetIdDispositivo,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);
  @override
  _i6.Future<void> obterVersaoDoApp() => (super.noSuchMethod(
        Invocation.method(
          #obterVersaoDoApp,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> sair() => (super.noSuchMethod(
        Invocation.method(
          #sair,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
